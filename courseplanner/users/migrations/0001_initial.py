# Generated by Django 3.1.1 on 2024-05-09 06:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('expected_grad_year', models.IntegerField(choices=[(2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029'), (2030, '2030'), (2031, '2031')], null=True)),
                ('expected_grad_term', models.CharField(choices=[('Fall', 'Fall'), ('Spring', 'Spring'), ('Summer', 'Summer'), ('Winter', 'Winter')], max_length=6, null=True)),
                ('file', models.FileField(blank=True, help_text='Upload your completed excel template. You may download a template on the home page.', null=True, upload_to='excel_files/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Fall', 'Fall'), ('Spring', 'Spring'), ('Summer', 'Summer'), ('Winter', 'Winter')], max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(choices=[(2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029'), (2030, '2030'), (2031, '2031')], null=True)),
                ('semester', models.CharField(choices=[('Fall', 'Fall'), ('Spring', 'Spring'), ('Summer', 'Summer'), ('Winter', 'Winter')], max_length=6, null=True)),
                ('code', models.CharField(max_length=10, verbose_name='Course Code')),
                ('credits', models.IntegerField(verbose_name='Credits')),
                ('grade', models.CharField(choices=[('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('F', 'F'), ('P', 'Pass'), ('W', 'Withdraw'), ('CR', 'Credit'), ('I', 'Incomplete'), ('WF', 'Withdraw Fail'), ('WP', 'Withdraw Pass')], max_length=2, null=True, verbose_name='Grade')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('program_type', models.CharField(choices=[('MAJ', 'Major'), ('MIN', 'Minor'), ('CERT', 'Certificate'), ('TRCK', 'Interest Track')], default='MAJ', max_length=4)),
                ('requirements', models.ManyToManyField(to='users.Requirement')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='curriculums',
            field=models.ManyToManyField(to='users.Curriculum'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('requirement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.requirement')),
                ('minimum_credits', models.PositiveSmallIntegerField()),
                ('requirements', models.ManyToManyField(related_name='requirements', to='users.Requirement')),
            ],
            bases=('users.requirement',),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('requirement_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='users.requirement')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Course Code')),
                ('credits', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=40)),
                ('description', models.TextField()),
                ('corequisites', models.ManyToManyField(blank=True, related_name='coreqs', to='users.Course')),
                ('offered', models.ManyToManyField(to='users.CourseTerm')),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='prereqs', to='users.Course')),
            ],
            bases=('users.requirement',),
        ),
    ]
